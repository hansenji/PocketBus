apply plugin: 'com.android.library'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'bintray-release'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 23
        versionCode versionCode
        versionName libraryVersion

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            testCoverageEnabled = true
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

dependencies {
    compile "com.android.support:support-annotations:$supportLibVersion"

    compile 'io.reactivex:rxjava:1.1.1'
    compile 'io.reactivex:rxandroid:1.1.0'

    compile project(path: ':core')

    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.1-SNAPSHOT'
    testCompile 'org.mockito:mockito-core:2.0.41-beta'
}

def libraryGroupId = 'com.vikingsen'
def libraryBaseName = 'pocketbus'

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
    }
}

def coverageSourceDirs = [
        'src/main/java',
]

jacoco {
    toolVersion "0.7.2.201409121644"
}

task testDebugJacoco(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    classDirectories = fileTree(
            dir: "$buildDir/intermediates/classes/debug",
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )
    reports {
        xml.enabled = true
        html.enabled = true
    }
    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files("$buildDir/jacoco/testDebugUnitTest.exec")
}

// ======== MAVEN DEPLOY to local cache or nexus repo (to make accessible to local projects) (command: ./gradlew clean aRel uploadArchives) ========
uploadArchives {
    repositories {
        // deploy to local
        mavenDeployer {
            repository (url: "file://${System.env.HOME}/.m2/repository/")
            pom.groupId = libraryGroupId
            pom.artifactId = libraryBaseName
            pom.version = libraryVersion + "-SNAPSHOT"
            pom.packaging = 'aar'
            uniqueVersion = false // don't put in a timestamp on the filename (other project will not be able to depend on it)
            pom.whenConfigured {pom ->
//                println pom.version
                def dep = pom.dependencies.find { dep ->
                    dep.groupId == 'bus'
                }
                dep.version = pom.version
                dep.groupId = pom.groupId
            }
        }
    }
}

// ======= BINTRAY DEPLOY (command: $ ./gradlew clean build bintrayUpload -PbintrayUser=BINTRAY_USERNAME -PbintrayKey=BINTRAY_KEY -PdryRun=false) ====
publish {
    groupId = libraryGroupId
    artifactId = libraryBaseName
    uploadName = 'PocketBus'
    version = libraryVersion
    autoPublish = false
    dryRun = false
}
